* Python Project Cookiecutter

** Installation

Install the tools necessary which are specified in the
[[file:requirements.txt][requirements.txt]] file, which is just cookiecutter and any plugins we
might need.

Then you can just make repos from the template either directly from
github:

#+begin_src bash
cookiecutter https://github.com/salotz/salotz-py-cookiecutter.git
#+end_src

Or from the cloned repo:

#+begin_src bash
cookiecutter .
#+end_src

Where you will be prompted for details.

Once you have generated a project see the dev guide produced there
which should be in the sphinx documentation:
~sphinx/source/dev_guide.org~.

** Usage

See the developer's guide in the info directory of your generated
project. The [[file:./{{cookiecutter.project_slug}}/info/dev_guide.org][template]] version is here if you want to see it before
generation.


* Development Guide

# TODO: move this strategy upstream to the meta-cookicutter

You can test generating things with this target:

#+begin_src bash
inv test-render
#+end_src

Once you generate a project it should have a target in it to test
itself which will bootstrap the ~dev~ environment and then run other
inv targets in it.

#+begin_src bash
inv test-render
cd tests/_test_builds/default_repo_name
inv repo-test
#+end_src

Which you can run with just one target from the
~salotz-py-cookiecutter~ repo:

#+begin_src bash
inv test-rendered-repo
#+end_src


If you want to test a particular thing that isn't in that target we
have found the following one-liners pretty helpful.

Initially render the test and move there

#+begin_src bash
inv test-render && cd tests/_test_builds/default_repo_name
#+end_src

Then to quickly re-render and put you back in the same location
afterwards:

#+begin_src bash
deactivate; (cd -; inv test-render)
#+end_src

For testing the full development cycle we need to:

- initialize version control
- compile dependencies for env
- make an env
- test
- build
- release
  - write changelog
  - write announcement
  - tag the git commit
- publish

#+begin_src bash
inv vcs-init && inv deps-pin && inv env
#+end_src

Then activate the env and do the rest.

#+begin_src bash
inv test-all
inv docs-serve
#+end_src

An example change to make would be to add this file to the
~src/wumpus~ folder:

#+begin_src python
if __name__ == "__main__":

    print("Hello! My name is Wumpus! Lets be friends!")

#+end_src

#+begin_src bash
python -m wumpus.main
#+end_src
